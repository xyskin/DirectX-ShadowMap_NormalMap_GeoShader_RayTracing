////////////////////////////////////////////////////////////////////////////////
// Filename: inputclass.h
////////////////////////////////////////////////////////////////////////////////
#ifndef _INPUTCLASS_H_
#define _INPUTCLASS_H_

////////////////////////////////////////////////////////////////////////////////
//Preprocess
////////////////////////////////////////////////////////////////////////////////
#define DIRECTXINPUT_VERSION 0x0800
#define RANGE(x, a, b) ((x) < (a) ? (a) : ((x) > (b) ? (b) : (x)))
////////////////////////////////////////////////////////////////////////////////
//Link
////////////////////////////////////////////////////////////////////////////////
#pragma comment(lib, "dinput8.lib")
#pragma comment(lib, "dxguid.lib")

#include <dinput.h>

////////////////////////////////////////////////////////////////////////////////
// Class name: InputClass
////////////////////////////////////////////////////////////////////////////////
class InputClass
{
public:
	InputClass();
	InputClass(const InputClass&);
	~InputClass();

	bool Initialize(HINSTANCE, HWND, int, int);
	void ShutDown();
	bool Frame();

	void GetMousePos(int&, int&);

	bool IsButtonClick(int);
	bool IsButtonDown(int);

private:
	bool ReadKeyboard();
	bool ReadMouse();
	void ProcessInput();

private:
	IDirectInput8* m_DirectxInput;
	IDirectInputDevice8* m_Mouse;
	IDirectInputDevice8* m_Keyboard;

	unsigned char m_KeyboardState[256];
	DIMOUSESTATE m_MouseState;

	int m_ScreenWidth, m_ScreenHeight;
	int m_MouseX, m_MouseY;
};

#endif